{"version":3,"sources":["api/client.js","features/notifications/notificationsSlice.js","app/Navbar.js","components/Spinner.js","features/users/usersSlice.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/postsSlice.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/EditPostForm.js","features/posts/SinglePostPage.js","features/notifications/NotificationsList.js","features/users/UsersList.js","features/users/UserPage.js","App.js","api/server.js","app/store.js","index.js"],"names":["client","endpoint","a","body","customConfig","headers","config","method","JSON","stringify","window","fetch","response","json","data","ok","status","url","Error","statusText","Promise","reject","message","get","post","notificationsAdapter","createEntityAdapter","sortComparer","b","date","localeCompare","fetchNotifications","createAsyncThunk","_","getState","allNotifications","selectAllNotifications","latestNotification","latestTimestamp","notificationsSlice","createSlice","name","initialState","getInitialState","reducers","allNotificationsRead","state","action","Object","values","entities","forEach","notification","read","extraReducers","builder","addCase","fulfilled","upsertMany","payload","isNew","actions","getSelectors","notifications","selectAll","Navbar","unreadNotificationsBadge","dispatch","useDispatch","numUnreadNotifications","useSelector","filter","n","length","className","to","onClick","Spinner","text","size","header","style","height","width","usersAdapter","fetchUsers","usersSlice","setAll","users","selectAllUsers","selectUserById","selectById","PostAuthor","userId","author","TimeAgo","timestamp","timeAgo","parseISO","timePeriod","formatDistanceToNow","title","postsAdapter","error","fetchPosts","addNewPost","initialPost","postsSlice","reactionAdded","postId","reaction","existingPost","reactions","postUpdated","id","content","pending","rejected","addOne","postAdded","posts","selectAllPosts","selectPostById","selectPostIds","selectIds","selectPostsByUser","createSelector","user","reactionEmoji","thumbsUp","hooray","heart","rocket","eyes","ReactionButtons","reactionButtons","entries","map","emoji","type","PostExcerpt","substring","PostsList","orderedPostIds","postStatus","useEffect","AddPostForm","useState","setTitle","setContent","setUserId","addRequestStatus","setAddRequestStatus","canSave","every","Boolean","onSavePostClicked","unwrap","console","usersOptions","value","htmlFor","placeholder","onChange","e","target","disabled","EditPostForm","match","params","history","useHistory","push","SinglePostPage","NotificationsList","useLayoutEffect","renderedNotifications","find","notificationClassname","classnames","new","UsersList","renderedUsers","UserPage","postTitles","App","seedDate","exact","path","render","Fragment","component","configureStore","reducer","postsReducer","usersReducer","notificationsReducer","ARTIFICIAL_DELAY_MS","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","db","factory","primaryKey","nanoid","firstName","String","lastName","username","manyOf","oneOf","comments","comment","Number","createUserData","internet","userName","i","create","j","newPost","lorem","words","recent","paragraphs","serializePost","handlers","rest","req","res","ctx","getAll","delay","findFirst","where","equals","patch","updatedPost","update","generateRandomNotifications","undefined","worker","setupWorker","socketServer","MockSocketServer","sendRandomNotifications","socket","since","obj","send","sendMessage","on","parse","notificationTemplates","numNotifications","pastDate","now","valueOf","setMinutes","getMinutes","Array","template","between","start","onUnhandledRequest","store","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8dc8d84.chunk.js","sourcesContent":["// A tiny wrapper around fetch(), borrowed from\n// https://kentcdodds.com/blog/replace-axios-with-a-simple-custom-fetch-wrapper\n\nexport async function client(endpoint, { body, ...customConfig } = {}) {\n  const headers = { 'Content-Type': 'application/json' }\n\n  const config = {\n    method: body ? 'POST' : 'GET',\n    ...customConfig,\n    headers: {\n      ...headers,\n      ...customConfig.headers,\n    },\n  }\n\n  if (body) {\n    config.body = JSON.stringify(body)\n  }\n\n  let data\n  try {\n    const response = await window.fetch(endpoint, config)\n    data = await response.json()\n    if (response.ok) {\n      // Return a result object similar to Axios\n      return {\n        status: response.status,\n        data,\n        headers: response.headers,\n        url: response.url,\n      }\n    }\n    throw new Error(response.statusText)\n  } catch (err) {\n    return Promise.reject(err.message ? err.message : data)\n  }\n}\n\nclient.get = function (endpoint, customConfig = {}) {\n  return client(endpoint, { ...customConfig, method: 'GET' })\n}\n\nclient.post = function (endpoint, body, customConfig = {}) {\n  return client(endpoint, { ...customConfig, body })\n}\n","import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit'\n\nimport { client } from '../../api/client'\n\nconst notificationsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n})\n\n\nexport const fetchNotifications = createAsyncThunk(\n  'notifications/fetchNotifications',\n  async (_, { getState }) => {\n    const allNotifications = selectAllNotifications(getState())\n    const [latestNotification] = allNotifications\n    const latestTimestamp = latestNotification ? latestNotification.date : ''\n    const response = await client.get(\n      `/fakeApi/notifications?since=${latestTimestamp}`\n    )\n    return response.data\n  }\n)\n\nconst notificationsSlice = createSlice({\n  name: 'notifications',\n  initialState: notificationsAdapter.getInitialState(),\n  reducers: {\n    allNotificationsRead(state, action) {\n      Object.values(state.entities).forEach(notification => {\n        notification.read = true\n      })\n    }\n  },\n  extraReducers(builder) {\n    builder.addCase(fetchNotifications.fulfilled, (state, action) => {\n      notificationsAdapter.upsertMany(state, action.payload)\n      Object.values(state.entities).forEach(notification => {\n        // Any notifications we've read are no longer new\n        notification.isNew = !notification.read\n      })\n    })\n  }\n})\n\nexport const { allNotificationsRead } = notificationsSlice.actions\n\nexport default notificationsSlice.reducer\n\nexport const { selectAll: selectAllNotifications } =\n  notificationsAdapter.getSelectors(state => state.notifications)","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { fetchNotifications, selectAllNotifications } from '../features/notifications/notificationsSlice'\n\nexport const Navbar = () => {\n  const dispatch = useDispatch()\n  const notifications = useSelector(selectAllNotifications)\n  const numUnreadNotifications = notifications.filter(n => !n.read).length\n\n  const fetchNewNotifications = () => {\n    dispatch(fetchNotifications())\n  }\n\n  let unreadNotificationsBadge;\n\n  if (numUnreadNotifications > 0) {\n    unreadNotificationsBadge = (\n      <span className=\"badge\">{numUnreadNotifications}</span>\n    )\n  }\n\n  return (\n    <nav>\n      <section>\n        <h1>Redux Essentials Example</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n            <Link to=\"/users\">Users</Link>\n            <Link to=\"/notifications\">Notifications {unreadNotificationsBadge}</Link>\n          </div>\n          <button className=\"button\" onClick={fetchNewNotifications}>\n            Refresh Notifications\n          </button>\n        </div>\n      </section>\n    </nav>\n  )\n}","import React from 'react'\n\nexport const Spinner = ({ text = '', size = '5em' }) => {\n  const header = text ? <h4>{text}</h4> : null\n  return (\n    <div className=\"spinner\">\n      {header}\n      <div className=\"loader\" style={{ height: size, width: size }} />\n    </div>\n  )\n}\n","import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst usersAdapter = createEntityAdapter();\n\nconst initialState = usersAdapter.getInitialState();\n\n\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n  const response = await client.get('/fakeApi/users')\n  return response.data\n});\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState,\n  reducers: {},\n  extraReducers(builder) {\n    builder.addCase(fetchUsers.fulfilled, usersAdapter.setAll)\n  }\n});\n\nexport default usersSlice.reducer;\n\nexport const { selectAll: selectAllUsers, selectById: selectUserById } =\n  usersAdapter.getSelectors(state => state.users)\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectUserById } from '../users/usersSlice'\n\n\nexport const PostAuthor = ({ userId }) => {\n  const author = useSelector((state) => selectUserById(state, userId));\n\n  return <span>by {author ? author.name : 'Unknown author'}</span>\n}\n","import React from 'react'\nimport { parseISO, formatDistanceToNow } from 'date-fns'\n\nexport const TimeAgo = ({ timestamp }) => {\n  let timeAgo = ''\n  if (timestamp) {\n    const date = parseISO(timestamp)\n    const timePeriod = formatDistanceToNow(date)\n    timeAgo = `${timePeriod} ago`\n  }\n\n  return (\n    <span title={timestamp}>\n      &nbsp; <i>{timeAgo}</i>\n    </span>\n  )\n}\n","import { createSlice, createAsyncThunk, createSelector, createEntityAdapter } from '@reduxjs/toolkit'\nimport { client } from '../../api/client'\n\nconst postsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n})\n\nconst initialState = postsAdapter.getInitialState({\n  status: 'idle',\n  error: null\n})\n\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const response = await client.get('/fakeApi/posts')\n  return response.data\n})\n\nexport const addNewPost = createAsyncThunk(\n  'posts/addNewPost',\n  async (initialPost) => {\n    const response = await client.post('/fakeApi/posts', initialPost)\n    return response.data\n  }\n)\n\nconst postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    reactionAdded(state, action) {\n      const { postId, reaction } = action.payload\n      const existingPost = state.entities[postId]\n      if (existingPost) {\n        existingPost.reactions[reaction]++\n      }\n    },\n    postUpdated(state, action) {\n      const { id, title, content } = action.payload\n      const existingPost = state.entities[id]\n      if (existingPost) {\n        existingPost.title = title\n        existingPost.content = content\n      }\n    },\n  },\n  extraReducers(builder) {\n    builder\n      .addCase(fetchPosts.pending, (state, action) => {\n        state.status = 'loading'\n      })\n      .addCase(fetchPosts.fulfilled, (state, action) => {\n        state.status = 'succeeded'\n        // Add any fetched posts to the array\n        // Use the `upsertMany` reducer as a mutating update utility to insert all posts from the Api call\n        postsAdapter.upsertMany(state, action.payload)\n      })\n      .addCase(fetchPosts.rejected, (state, action) => {\n        state.status = 'failed'\n        state.error = action.error.message\n      })\n      // Use the `addOne` reducer for the fulfilled case to add One New Post\n      .addCase(addNewPost.fulfilled, postsAdapter.addOne)\n  },\n})\n\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\n\nexport default postsSlice.reducer\n\n// export const selectAllPosts = (state) => state.posts.posts\n\n// export const selectPostById = (state, postId) =>\n//   state.posts.posts.find((post) => post.id === postId)\n\n// Export the customized selectors for this adapter using `getSelectors`\n// Destructuring and renaming \nexport const {\n  selectAll: selectAllPosts,\n  selectById: selectPostById,\n  selectIds: selectPostIds\n  // Pass in a selector that returns the posts slice of state\n} = postsAdapter.getSelectors(state => state.posts)\n\nexport const selectPostsByUser = createSelector(\n  [selectAllPosts, (state, userId) => userId],\n  (posts, userId) => posts.filter(post => post.user === userId)\n)\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { reactionAdded } from './postsSlice'\n\nconst reactionEmoji = {\n  thumbsUp: '👍',\n  hooray: '🎉',\n  heart: '❤️',\n  rocket: '🚀',\n  eyes: '👀',\n}\n\nexport const ReactionButtons = ({ post }) => {\n  const dispatch = useDispatch()\n\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\n    return (\n      <button\n        key={name}\n        type=\"button\"\n        className=\"muted-button reaction-button\"\n        onClick={() =>\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\n        }\n      >\n        {emoji} {post.reactions[name]}\n      </button>\n    )\n  })\n\n  return <div>{reactionButtons}</div>\n}\n","import React, { useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { Spinner } from '../../components/Spinner'\nimport { PostAuthor } from './PostAuthor'\nimport { TimeAgo } from './TimeAgo'\nimport { ReactionButtons } from './ReactionButtons'\nimport { selectAllPosts, fetchPosts, selectPostIds, selectPostById } from './postsSlice'\n\n\nlet PostExcerpt = ({ postId }) => {\n  const post = useSelector(state => selectPostById(state, postId))\n  return (\n    <article className=\"post-excerpt\" key={post.id}>\n      <h3>{post.title}</h3>\n      <div>\n        <PostAuthor userId={post.user} />\n        <TimeAgo timestamp={post.date} />\n      </div>\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\n\n      <ReactionButtons post={post} />\n      <Link to={`/posts/${post.id}`} className=\"button muted-button\">\n        View Post\n      </Link>\n    </article>\n  )\n}\n\nexport const PostsList = () => {\n  const dispatch = useDispatch();\n  // Get posts in reverse chronological order by datetime string\n  const orderedPostIds = useSelector(selectPostIds)\n\n \n  const postStatus = useSelector(state => state.posts.status);\n  const error = useSelector(state => state.posts.error)\n\n   // fetch Posts\n  useEffect(() => {\n    if (postStatus === 'idle') {\n      dispatch(fetchPosts());\n    }\n  }, [postStatus, dispatch])\n\n  let content\n\n  if (postStatus === 'loading') {\n    content = <Spinner text=\"Loading...\" />\n  } else if (postStatus === 'succeeded') {\n    content = orderedPostIds.map(postId => (\n      <PostExcerpt key={postId} postId={postId} />\n    ))\n  } else if (postStatus === 'failed') {\n    content = <div>{error}</div>\n  }\n\n  return (\n    <section className=\"posts-list\">\n      <h2>Posts</h2>\n      {content}\n    </section>\n  )\n}\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { addNewPost } from './postsSlice'\nimport { selectAllUsers } from '../users/usersSlice'\n\nexport const AddPostForm = () => {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n  const [userId, setUserId] = useState('')\n  const [addRequestStatus, setAddRequestStatus] = useState('idle')\n\n  const dispatch = useDispatch()\n  const users = useSelector(selectAllUsers)\n\n  const onTitleChanged = (e) => setTitle(e.target.value)\n  const onContentChanged = (e) => setContent(e.target.value)\n  const onAuthorChanged = (e) => setUserId(e.target.value)\n\n  const canSave =\n    [title, content, userId].every(Boolean) && addRequestStatus === 'idle'\n\n  const onSavePostClicked = async () => {\n    if (canSave) {\n      try {\n        setAddRequestStatus('pending')\n        await dispatch(addNewPost({ title, content, user: userId })).unwrap()\n        setTitle('')\n        setContent('')\n        setUserId('')\n      } catch (err) {\n        console.error('Failed to save the post: ', err)\n      } finally {\n        setAddRequestStatus('idle')\n      }\n    }\n  }\n\n  const usersOptions = users.map((user) => (\n    <option key={user.id} value={user.id}>\n      {user.name}\n    </option>\n  ))\n\n  return (\n    <section>\n      <h2>Add a New Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          placeholder=\"What's on your mind?\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postAuthor\">Author:</label>\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\n          <option value=\"\"></option>\n          {usersOptions}\n        </select>\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\n          Save Post\n        </button>\n      </form>\n    </section>\n  )\n}\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nimport { postUpdated, selectPostById } from './postsSlice'\n\nexport const EditPostForm = ({ match }) => {\n  const { postId } = match.params;\n\n  const post = useSelector((state) => selectPostById(state, postId) )\n\n  const [title, setTitle] = useState(post.title)\n  const [content, setContent] = useState(post.content)\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n\n  const onTitleChanged = (e) => setTitle(e.target.value)\n  const onContentChanged = (e) => setContent(e.target.value)\n\n  const onSavePostClicked = () => {\n    if (title && content) {\n      dispatch(postUpdated({ id: postId, title, content }))\n      history.push(`/posts/${postId}`)\n    }\n  }\n\n  return (\n    <section>\n      <h2>Edit Post</h2>\n      <form>\n        <label htmlFor=\"postTitle\">Post Title:</label>\n        <input\n          type=\"text\"\n          id=\"postTitle\"\n          name=\"postTitle\"\n          placeholder=\"What's on your mind?\"\n          value={title}\n          onChange={onTitleChanged}\n        />\n        <label htmlFor=\"postContent\">Content:</label>\n        <textarea\n          id=\"postContent\"\n          name=\"postContent\"\n          value={content}\n          onChange={onContentChanged}\n        />\n      </form>\n      <button type=\"button\" onClick={onSavePostClicked}>\n        Save Post\n      </button>\n    </section>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { PostAuthor } from './PostAuthor'\nimport { TimeAgo } from './TimeAgo'\nimport { ReactionButtons } from './ReactionButtons'\nimport { selectPostById } from './postsSlice'\n\nexport const SinglePostPage = ({ match }) => {\n  const { postId } = match.params\n\n  const post = useSelector(state => selectPostById(state, postId));\n\n  if (!post) {\n    return (\n      <section>\n        <h2>Post not found!</h2>\n      </section>\n    )\n  }\n\n  return (\n    <section>\n      <article className=\"post\">\n        <h2>{post.title}</h2>\n        <div>\n          <PostAuthor userId={post.user} />\n          <TimeAgo timestamp={post.date} />\n        </div>\n        <p className=\"post-content\">{post.content}</p>\n        <ReactionButtons post={post} />\n        <Link to={`/editPost/${post.id}`} className=\"button\">\n          Edit Post\n        </Link>\n      </article>\n    </section>\n  )\n}\n","import React, { useLayoutEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { formatDistanceToNow, parseISO } from 'date-fns'\nimport classnames from 'classnames'\n\nimport { selectAllUsers } from '../users/usersSlice'\n\nimport {\n  selectAllNotifications,\n  allNotificationsRead,\n} from './notificationsSlice'\n\nexport const NotificationsList = () => {\n  const dispatch = useDispatch()\n  const notifications = useSelector(selectAllNotifications)\n  const users = useSelector(selectAllUsers)\n\n  useLayoutEffect(() => {\n    dispatch(allNotificationsRead())\n  })\n\n  const renderedNotifications = notifications.map((notification) => {\n    const date = parseISO(notification.date)\n    const timeAgo = formatDistanceToNow(date)\n    const user = users.find((user) => user.id === notification.user) || {\n      name: 'Unknown User',\n    }\n\n    const notificationClassname = classnames('notification', {\n      new: notification.isNew,\n    })\n\n    return (\n      <div key={notification.id} className={notificationClassname}>\n        <div>\n          <b>{user.name}</b> {notification.message}\n        </div>\n        <div title={notification.date}>\n          <i>{timeAgo} ago</i>\n        </div>\n      </div>\n    )\n  })\n\n  return (\n    <section className=\"notificationsList\">\n      <h2>Notifications</h2>\n      {renderedNotifications}\n    </section>\n  )\n}\n","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\nimport { selectAllUsers } from './usersSlice'\n\nexport const UsersList = () => {\n  const users = useSelector(selectAllUsers)\n\n  const renderedUsers = users.map(user => (\n    <li key={user.id}>\n      <Link to={`/users/${user.id}`}>{user.name}</Link>\n    </li>\n  ))\n\n  return (\n    <section>\n      <h2>Users</h2>\n\n      <ul>{renderedUsers}</ul>\n    </section>\n  )\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\nimport { Link } from 'react-router-dom'\n\nimport { selectUserById } from '../users/usersSlice'\nimport { selectPostsByUser } from '../posts/postsSlice'\n\nexport const UserPage = ({ match }) => {\n  const { userId } = match.params\n\n  const user = useSelector(state => selectUserById(state, userId))\n\n  const postsForUser = useSelector(state => selectPostsByUser(state, userId))\n\n\n  const postTitles = postsForUser.map(post => (\n    <li key={post.id}>\n      <Link to={`/posts/${post.id}`}>{post.title}</Link>\n    </li>\n  ))\n\n  return (\n    <section>\n      <h2>{user.name}</h2>\n\n      <ul>{postTitles}</ul>\n    </section>\n  )\n}","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\n\nimport { PostsList } from './features/posts/PostsList'\nimport { AddPostForm } from './features/posts/AddPostForm'\nimport { EditPostForm } from './features/posts/EditPostForm'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\nimport { NotificationsList } from './features/notifications/NotificationsList'\nimport { UsersList } from './features/users/UsersList'\nimport { UserPage } from './features/users/UserPage'\n\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/notifications\" component={NotificationsList} />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Route exact path=\"/users\" component={UsersList} />\n          <Route exact path=\"/users/:userId\" component={UserPage} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import { rest, setupWorker } from 'msw'\nimport { factory, oneOf, manyOf, primaryKey } from '@mswjs/data'\nimport { nanoid } from '@reduxjs/toolkit'\nimport faker from 'faker'\nimport seedrandom from 'seedrandom'\nimport { Server as MockSocketServer } from 'mock-socket'\nimport { setRandom } from 'txtgen'\n\nimport { parseISO } from 'date-fns'\n\nconst NUM_USERS = 3\nconst POSTS_PER_USER = 3\nconst RECENT_NOTIFICATIONS_DAYS = 7\n\n// Add an extra delay to all endpoints, so loading spinners show up.\nconst ARTIFICIAL_DELAY_MS = 2000\n\n/* RNG setup */\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\n/* MSW Data Model Setup */\n\nexport const db = factory({\n  user: {\n    id: primaryKey(nanoid),\n    firstName: String,\n    lastName: String,\n    name: String,\n    username: String,\n    posts: manyOf('post'),\n  },\n  post: {\n    id: primaryKey(nanoid),\n    title: String,\n    date: String,\n    content: String,\n    reactions: oneOf('reaction'),\n    comments: manyOf('comment'),\n    user: oneOf('user'),\n  },\n  comment: {\n    id: primaryKey(String),\n    date: String,\n    text: String,\n    post: oneOf('post'),\n  },\n  reaction: {\n    id: primaryKey(nanoid),\n    thumbsUp: Number,\n    hooray: Number,\n    heart: Number,\n    rocket: Number,\n    eyes: Number,\n    post: oneOf('post'),\n  },\n})\n\nconst createUserData = () => {\n  const firstName = faker.name.firstName()\n  const lastName = faker.name.lastName()\n\n  return {\n    firstName,\n    lastName,\n    name: `${firstName} ${lastName}`,\n    username: faker.internet.userName(),\n  }\n}\n\nconst createPostData = (user) => {\n  return {\n    title: faker.lorem.words(),\n    date: faker.date.recent(RECENT_NOTIFICATIONS_DAYS).toISOString(),\n    user,\n    content: faker.lorem.paragraphs(),\n    reactions: db.reaction.create(),\n  }\n}\n\n// Create an initial set of users and posts\nfor (let i = 0; i < NUM_USERS; i++) {\n  const author = db.user.create(createUserData())\n\n  for (let j = 0; j < POSTS_PER_USER; j++) {\n    const newPost = createPostData(author)\n    db.post.create(newPost)\n  }\n}\n\nconst serializePost = (post) => ({\n  ...post,\n  user: post.user.id,\n})\n\n/* MSW REST API Handlers */\n\nexport const handlers = [\n  rest.get('/fakeApi/posts', function (req, res, ctx) {\n    const posts = db.post.getAll().map(serializePost)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(posts))\n  }),\n  rest.post('/fakeApi/posts', function (req, res, ctx) {\n    const data = req.body\n\n    if (data.content === 'error') {\n      return res(\n        ctx.delay(ARTIFICIAL_DELAY_MS),\n        ctx.status(500),\n        ctx.json('Server error saving this post!')\n      )\n    }\n\n    data.date = new Date().toISOString()\n\n    const user = db.user.findFirst({ where: { id: { equals: data.user } } })\n    data.user = user\n    data.reactions = db.reaction.create()\n\n    const post = db.post.create(data)\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.get('/fakeApi/posts/:postId', function (req, res, ctx) {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(serializePost(post)))\n  }),\n  rest.patch('/fakeApi/posts/:postId', (req, res, ctx) => {\n    const { id, ...data } = req.body\n    const updatedPost = db.post.update({\n      where: { id: { equals: req.params.postId } },\n      data,\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n\n  rest.get('/fakeApi/posts/:postId/comments', (req, res, ctx) => {\n    const post = db.post.findFirst({\n      where: { id: { equals: req.params.postId } },\n    })\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json({ comments: post.comments })\n    )\n  }),\n\n  rest.post('/fakeApi/posts/:postId/reactions', (req, res, ctx) => {\n    const postId = req.params.postId\n    const reaction = req.body.reaction\n    const post = db.post.findFirst({\n      where: { id: { equals: postId } },\n    })\n\n    const updatedPost = db.post.update({\n      where: { id: { equals: postId } },\n      data: {\n        reactions: {\n          ...post.reactions,\n          [reaction]: (post.reactions[reaction] += 1),\n        },\n      },\n    })\n\n    return res(\n      ctx.delay(ARTIFICIAL_DELAY_MS),\n      ctx.json(serializePost(updatedPost))\n    )\n  }),\n  rest.get('/fakeApi/notifications', (req, res, ctx) => {\n    const numNotifications = getRandomInt(1, 5)\n\n    let notifications = generateRandomNotifications(\n      undefined,\n      numNotifications,\n      db\n    )\n\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(notifications))\n  }),\n  rest.get('/fakeApi/users', (req, res, ctx) => {\n    return res(ctx.delay(ARTIFICIAL_DELAY_MS), ctx.json(db.user.getAll()))\n  }),\n]\n\nexport const worker = setupWorker(...handlers)\n// worker.printHandlers() // Optional: nice for debugging to see all available route handlers that will be intercepted\n\n/* Mock Websocket Setup */\n\nconst socketServer = new MockSocketServer('ws://localhost')\n\nlet currentSocket\n\nconst sendMessage = (socket, obj) => {\n  socket.send(JSON.stringify(obj))\n}\n\n// Allow our UI to fake the server pushing out some notifications over the websocket,\n// as if other users were interacting with the system.\nconst sendRandomNotifications = (socket, since) => {\n  const numNotifications = getRandomInt(1, 5)\n\n  const notifications = generateRandomNotifications(since, numNotifications, db)\n\n  sendMessage(socket, { type: 'notifications', payload: notifications })\n}\n\nexport const forceGenerateNotifications = (since) => {\n  sendRandomNotifications(currentSocket, since)\n}\n\nsocketServer.on('connection', (socket) => {\n  currentSocket = socket\n\n  socket.on('message', (data) => {\n    const message = JSON.parse(data)\n\n    switch (message.type) {\n      case 'notifications': {\n        const since = message.payload\n        sendRandomNotifications(socket, since)\n        break\n      }\n      default:\n        break\n    }\n  })\n})\n\n/* Random Notifications Generation */\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nfunction generateRandomNotifications(since, numNotifications, db) {\n  const now = new Date()\n  let pastDate\n\n  if (since) {\n    pastDate = parseISO(since)\n  } else {\n    pastDate = new Date(now.valueOf())\n    pastDate.setMinutes(pastDate.getMinutes() - 15)\n  }\n\n  // Create N random notifications. We won't bother saving these\n  // in the DB - just generate a new batch and return them.\n  const notifications = [...Array(numNotifications)].map(() => {\n    const user = randomFromArray(db.user.getAll())\n    const template = randomFromArray(notificationTemplates)\n    return {\n      id: nanoid(),\n      date: faker.date.between(pastDate, now).toISOString(),\n      message: template,\n      user: user.id,\n    }\n  })\n\n  return notifications\n}\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport postsReducer from '../features/posts/postsSlice'\nimport usersReducer from '../features/users/usersSlice'\nimport notificationsReducer from '../features/notifications/notificationsSlice'\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer,\n    notifications: notificationsReducer,\n  },\n})\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\nimport { fetchUsers } from './features/users/usersSlice'\n\nimport { worker } from './api/server'\n\n// Wrap app rendering so we can wait for the mock API to initialize\nasync function start() {\n  // Start our mock API server\n  await worker.start({ onUnhandledRequest: 'bypass' })\n\n  store.dispatch(fetchUsers())\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nstart()\n"],"sourceRoot":""}